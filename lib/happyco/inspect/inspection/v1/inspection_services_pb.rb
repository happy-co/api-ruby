# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: happyco/inspect/inspection/v1/inspection.proto for package 'happyco.inspect.inspection.v1'

require 'grpc'
require 'happyco/inspect/inspection/v1/inspection_pb'

module Happyco
  module Inspect
    module Inspection
      module V1
        module InspectionService
          # * Inspection service is used for creating, updating and archiving
          # inspections. Unless otherwise noted all bulk methods occur inside of a
          # transaction and in the event of an error all requested changes on that
          # method call will be rolled back.
          class Service

            include GRPC::GenericService

            self.marshal_class_method = :encode
            self.unmarshal_class_method = :decode
            self.service_name = 'happyco.inspect.inspection.v1.InspectionService'

            # * List inspections gets a paginated and optionally filtered list of
            # inspections from one or more folders.
            rpc :ListInspections, ListInspectionsRequest, ListInspectionsResponse
            # * Create inspections can create inspections with any status (normally
            # scheduled). 
            rpc :CreateInspections, CreateInspectionsRequest, CreateInspectionsResponse
            # * Update inspections can change the contents of inspections.
            # Currently an inspection cannot have its asset_id or template_id
            # updated.
            rpc :UpdateInspections, UpdateInspectionsRequest, UpdateInspectionsResponse
            # * Archive inspections should be used to delete inspections that are no
            # longer wanted. No method for purging archived inspections is
            # available via the API.
            rpc :ArchiveInspections, SetInspectionsArchivedRequest, SetInspectionsArchivedResponse
            # * Unarchive inspections should be used if previously archived
            # inspections need to be restored.
            rpc :UnarchiveInspections, SetInspectionsArchivedRequest, SetInspectionsArchivedResponse
            # * Adds photos to inspections. The returned photo IDs must be inserted
            # into the inspection for them to be displayed. This inspection does
            # not occur in a transaction and you will receive a response for each
            # photo. 
            rpc :AddInspectionPhotos, AddInspectionPhotosRequest, AddInspectionPhotosResponse
            rpc :CreateDelegatedInspectionLinks, CreateDelegatedInspectionLinksRequest, CreateDelegatedInspectionLinksResponse
          end

          Stub = Service.rpc_stub_class
        end
        module InspectionEventService
          # * InspectionEventService is the simplest way to be notified of inspection
          # status changes. Any number of clients can connect to the service and be
          # pushed the events. HappyCo guarantees to only send one client the event at a
          # time (in a round robin fashion). This means that you can scale event
          # processing as easily as your web servers.
          # 
          # For this to work events must be acknowledged or time extensions requested
          # before the timeout peroid. If neither of these occurs, the event will be
          # sent to a new client. This covers 99% of cases, but if it's essential that
          # in the event of a frozen client (that unfreezes) that the event is not sent
          # to another client. You can de-duplicate requests using the event ID.
          #
          # When selecting a timeout and possible requesting time extensions please be
          # wary of network travel time. We recommend setting large timeouts (10mins+)
          # unless there is a critical reason to be resent events faster. 
          class Service

            include GRPC::GenericService

            self.marshal_class_method = :encode
            self.unmarshal_class_method = :decode
            self.service_name = 'happyco.inspect.inspection.v1.InspectionEventService'

            # * On inspection status changes returns a stream that will be pushed
            # events as they occur
            rpc :OnInspectionStatusChanges, InspectionStatusChangesEventRequest, stream(InspectionStatusChangesEvent)
            # * On inspection status changes ack should be called when events have
            # been processed. Unless this is called events will be sent again
            # after the timeout period. 
            rpc :OnInspectionStatusChangesAck, InspectionStatusChangesEventAck, InspectionStatusChangesEventAckResponse
          end

          Stub = Service.rpc_stub_class
        end
      end
    end
  end
end
