# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: happyco/inspect/inspection/v1/inspection.proto

require 'google/protobuf'

require 'happyco/type/v1/integration_id_pb'
require 'happyco/type/v1/date_pb'
require 'happyco/type/v1/paging_pb'
require 'happyco/type/v1/event_pb'
require 'happyco/inspect/type/v1/inspect_type_pb'
Google::Protobuf::DescriptorPool.generated_pool.build do
  add_message "happyco.inspect.inspection.v1.Inspection" do
    optional :id, :message, 1, "happyco.type.v1.IntegrationID"
    optional :account_id, :message, 2, "happyco.type.v1.IntegrationID"
    optional :folder_id, :message, 3, "happyco.type.v1.IntegrationID"
    optional :asset_id, :message, 4, "happyco.type.v1.IntegrationID"
    optional :template_id, :message, 5, "happyco.type.v1.IntegrationID"
    optional :template_outline, :string, 6
    oneof :status do
      optional :scheduled, :message, 7, "happyco.inspect.inspection.v1.ScheduledInspection"
      optional :in_progress, :message, 8, "happyco.inspect.inspection.v1.InspectionData"
      optional :completed, :message, 9, "happyco.inspect.inspection.v1.InspectionData"
    end
  end
  add_message "happyco.inspect.inspection.v1.ScheduledInspection" do
    optional :schedule_date, :message, 1, "happyco.type.v1.Date"
    repeated :header_fields, :message, 2, "happyco.inspect.type.v1.HeaderField"
    repeated :footer_fields, :message, 3, "happyco.inspect.type.v1.FooterField"
    repeated :sections, :message, 4, "happyco.inspect.type.v1.Section"
  end
  add_message "happyco.inspect.inspection.v1.InspectionData" do
    optional :started_at, :message, 1, "happyco.type.v1.Date"
    optional :ended_at, :message, 2, "happyco.type.v1.Date"
    optional :user_started_at, :message, 3, "happyco.type.v1.Date"
    optional :user_ended_at, :message, 4, "happyco.type.v1.Date"
    repeated :header_fields, :message, 7, "happyco.inspect.type.v1.HeaderField"
    repeated :sections, :message, 6, "happyco.inspect.type.v1.Section"
    repeated :footer_fields, :message, 8, "happyco.inspect.type.v1.FooterField"
    map :rating_groups, :string, :message, 5, "happyco.inspect.type.v1.RatingGroups"
  end
  add_message "happyco.inspect.inspection.v1.ListInspectionsRequest" do
    optional :account_id, :message, 1, "happyco.type.v1.IntegrationID"
    repeated :folder_ids, :message, 2, "happyco.type.v1.IntegrationID"
    repeated :asset_ids, :message, 3, "happyco.type.v1.IntegrationID"
    repeated :inspection_ids, :message, 4, "happyco.type.v1.IntegrationID"
    optional :archived, :bool, 5
    optional :paging, :message, 6, "happyco.type.v1.Paging"
  end
  add_message "happyco.inspect.inspection.v1.ListInspectionsResponse" do
    repeated :inspections, :message, 1, "happyco.inspect.inspection.v1.Inspection"
    optional :previous_page, :message, 2, "happyco.type.v1.Paging"
    optional :next_page, :message, 3, "happyco.type.v1.Paging"
  end
  add_message "happyco.inspect.inspection.v1.CreateInspectionsRequest" do
    optional :account_id, :message, 1, "happyco.type.v1.IntegrationID"
    repeated :inspections, :message, 2, "happyco.inspect.inspection.v1.Inspection"
  end
  add_message "happyco.inspect.inspection.v1.CreateInspectionsResponse" do
    repeated :inspection_ids, :message, 1, "happyco.type.v1.IntegrationID"
  end
  add_message "happyco.inspect.inspection.v1.UpdateInspectionsRequest" do
    optional :account_id, :message, 1, "happyco.type.v1.IntegrationID"
    repeated :inspections, :message, 2, "happyco.inspect.inspection.v1.Inspection"
  end
  add_message "happyco.inspect.inspection.v1.UpdateInspectionsResponse" do
  end
  add_message "happyco.inspect.inspection.v1.SetInspectionsArchivedRequest" do
    optional :account_id, :message, 1, "happyco.type.v1.IntegrationID"
    repeated :inspection_ids, :message, 3, "happyco.type.v1.IntegrationID"
  end
  add_message "happyco.inspect.inspection.v1.SetInspectionsArchivedResponse" do
  end
  add_message "happyco.inspect.inspection.v1.InspectionStatusChangesEventRequest" do
    optional :account_id, :message, 1, "happyco.type.v1.IntegrationID"
    optional :options, :message, 2, "happyco.type.v1.EventHandlerOptions"
  end
  add_message "happyco.inspect.inspection.v1.InspectionStatusChangesEvent" do
    optional :event, :message, 1, "happyco.type.v1.Event"
    repeated :changes, :message, 2, "happyco.inspect.inspection.v1.InspectionStatusChangesEvent.InspectionStatusChange"
  end
  add_message "happyco.inspect.inspection.v1.InspectionStatusChangesEvent.InspectionStatusChange" do
    optional :inspection_id, :message, 1, "happyco.type.v1.IntegrationID"
    optional :from_status, :enum, 2, "happyco.inspect.inspection.v1.InspectionStatusChangesEvent.InspectionStatusChange.Status"
    optional :to_status, :enum, 3, "happyco.inspect.inspection.v1.InspectionStatusChangesEvent.InspectionStatusChange.Status"
  end
  add_enum "happyco.inspect.inspection.v1.InspectionStatusChangesEvent.InspectionStatusChange.Status" do
    value :SCHEDULED, 0
    value :IN_PROGRESS, 1
    value :COMPLETED, 2
  end
  add_message "happyco.inspect.inspection.v1.InspectionStatusChangesEventAck" do
    optional :ack, :message, 1, "happyco.type.v1.EventAck"
  end
  add_message "happyco.inspect.inspection.v1.InspectionStatusChangesEventAckResponse" do
  end
end

module Happyco
  module Inspect
    module Inspection
      module V1
        Inspection = Google::Protobuf::DescriptorPool.generated_pool.lookup("happyco.inspect.inspection.v1.Inspection").msgclass
        ScheduledInspection = Google::Protobuf::DescriptorPool.generated_pool.lookup("happyco.inspect.inspection.v1.ScheduledInspection").msgclass
        InspectionData = Google::Protobuf::DescriptorPool.generated_pool.lookup("happyco.inspect.inspection.v1.InspectionData").msgclass
        ListInspectionsRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("happyco.inspect.inspection.v1.ListInspectionsRequest").msgclass
        ListInspectionsResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("happyco.inspect.inspection.v1.ListInspectionsResponse").msgclass
        CreateInspectionsRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("happyco.inspect.inspection.v1.CreateInspectionsRequest").msgclass
        CreateInspectionsResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("happyco.inspect.inspection.v1.CreateInspectionsResponse").msgclass
        UpdateInspectionsRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("happyco.inspect.inspection.v1.UpdateInspectionsRequest").msgclass
        UpdateInspectionsResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("happyco.inspect.inspection.v1.UpdateInspectionsResponse").msgclass
        SetInspectionsArchivedRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("happyco.inspect.inspection.v1.SetInspectionsArchivedRequest").msgclass
        SetInspectionsArchivedResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("happyco.inspect.inspection.v1.SetInspectionsArchivedResponse").msgclass
        InspectionStatusChangesEventRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("happyco.inspect.inspection.v1.InspectionStatusChangesEventRequest").msgclass
        InspectionStatusChangesEvent = Google::Protobuf::DescriptorPool.generated_pool.lookup("happyco.inspect.inspection.v1.InspectionStatusChangesEvent").msgclass
        InspectionStatusChangesEvent::InspectionStatusChange = Google::Protobuf::DescriptorPool.generated_pool.lookup("happyco.inspect.inspection.v1.InspectionStatusChangesEvent.InspectionStatusChange").msgclass
        InspectionStatusChangesEvent::InspectionStatusChange::Status = Google::Protobuf::DescriptorPool.generated_pool.lookup("happyco.inspect.inspection.v1.InspectionStatusChangesEvent.InspectionStatusChange.Status").enummodule
        InspectionStatusChangesEventAck = Google::Protobuf::DescriptorPool.generated_pool.lookup("happyco.inspect.inspection.v1.InspectionStatusChangesEventAck").msgclass
        InspectionStatusChangesEventAckResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("happyco.inspect.inspection.v1.InspectionStatusChangesEventAckResponse").msgclass
      end
    end
  end
end
