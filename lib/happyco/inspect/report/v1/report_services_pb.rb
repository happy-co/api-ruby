# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: happyco/inspect/report/v1/report.proto for package 'happyco.inspect.report.v1'

require 'grpc'
require 'happyco/inspect/report/v1/report_pb'

module Happyco
  module Inspect
    module Report
      module V1
        module ReportService
          # * Report service is used for acceing reports generated from
          # one or two inspections that are linked to the same asset. 
          class Service

            include GRPC::GenericService

            self.marshal_class_method = :encode
            self.unmarshal_class_method = :decode
            self.service_name = 'happyco.inspect.report.v1.ReportService'

            # * List reports gets a paginated and optionally filtered list of
            # reports from one or more folders.
            rpc :ListReports, ListReportsRequest, ListReportsResponse
          end

          Stub = Service.rpc_stub_class
        end
        module ReportEventService
          # * ReportEventService is the simplest way to be notified of reports being
          # created Any number of clients can connect to the service and be pushed the
          # events. HappyCo guarantees to only send one client the event at a time (in a
          # round robin fashion). This means that you can scale event processing as
          # easily as your web servers.
          # 
          # For this to work events must be acknowledged or time extensions requested
          # before the timeout peroid. If neither of these occurs, the event will be
          # sent to a new client. This covers 99% of cases, but if it's essential that
          # in the event of a frozen client (that unfreezes) that the event is not sent
          # to another client. You can de-duplicate requests using the event ID.
          #
          # When selecting a timeout and possible requesting time extensions please be
          # wary of network travel time. We recommend setting large timeouts (10mins+)
          # unless there is a critical reason to be resent events faster. 
          class Service

            include GRPC::GenericService

            self.marshal_class_method = :encode
            self.unmarshal_class_method = :decode
            self.service_name = 'happyco.inspect.report.v1.ReportEventService'

            # * On reports created returns a stream that will be pushed events as
            # they occur
            rpc :OnReportsCreated, ReportsCreatedEventRequest, stream(ReportsCreatedEvent)
            # * On reports created ack should be called when events have
            # been processed. Unless this is called events will be sent again
            # after the timeout period. 
            rpc :OnReportsCreatedAck, ReportsCreatedEventAck, ReportsCreatedEventAckResponse
          end

          Stub = Service.rpc_stub_class
        end
      end
    end
  end
end
